apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: 'hu.supercluster.paperwork'
apply plugin: 'com.frogermcs.androiddevmetrics'

paperwork {
  set = [gitSha: gitSha(),
      buildDate: buildTime("dd-MM-yyyy HH:00:00 z", "UTC"),]
}

def getVersionName = { ->
  try {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe'
      standardOutput = stdout
    }
    return stdout.toString().trim()
  } catch (ignored) {
    return null
  }
}

def getVersionCode = { ->
  try {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'rev-list', '--first-parent', '--count', 'origin/master'
      standardOutput = stdout
    }
    return Integer.parseInt(stdout.toString().trim())
  } catch (ignored) {
    return -1
  }
}

android {
  compileSdkVersion 28
  buildToolsVersion '27.0.3'

  defaultConfig {
    applicationId "com.myki.challenge"
    minSdkVersion 21
    targetSdkVersion 27
    versionCode 1
    versionName "1.0"

    multiDexEnabled true

    archivesBaseName = "baseapp-${versionName}-${versionCode}"
    vectorDrawables.useSupportLibrary = true

    buildConfigField 'String', 'SERVER_URL', '"https://base.app.com"'
    buildConfigField 'String', 'IMAGE_SERVER_URL', '"https://logo.clearbit.com/"'

  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }


  buildTypes {
    debug {
      versionNameSuffix "-debug"
    }
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
  }

  applicationVariants.all { variant ->
    variant.getCompileConfiguration().resolutionStrategy {
      // Force our version of support-annotations, we have a conflict between app and androidTest dependency resolution.
      force "com.android.support:support-annotations:$supportVersion"
    }
  }

  configurations.all {
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    resolutionStrategy.dependencySubstitution {
      substitute module('org.apache.commons:commons-io:1.3.2') with module(
          'commons-io:commons-io:1.3.2')
    }
  }

}

ext {
  supportVersion = '28.0.0'
  autoValueVersion = '1.5'
  daggerVersion = '2.12'
  butterKnifeVersion = '8.8.1'
  glideVersion = '4.9.0'
  permissionsdispatcherVersion = '3.1.0'
  intercomVersion = '4.1.4'
  stethoVersion = '1.5.0'
  lottieVersion = '2.5.5'
}

dependencies {

  implementation 'com.android.support:support-v4:28.0.0'
  configurations {
    all*.exclude group: 'com.android.support', module: 'support-v13'
  }

  implementation fileTree(include: '*.jar', dir: 'libs')

  // SUPPORT LIBS
  implementation "com.android.support:support-compat:$supportVersion"
  implementation "com.android.support:support-v4:$supportVersion"
  implementation "com.android.support:appcompat-v7:$supportVersion"
  implementation "com.android.support:support-annotations:$supportVersion"
  implementation "com.android.support:percent:$supportVersion"
  implementation "com.android.support:design:$supportVersion"
  implementation "com.android.support:cardview-v7:$supportVersion"
  implementation "com.android.support:palette-v7:$supportVersion"
  implementation "com.android.support:customtabs:$supportVersion"

  // Added this to overwrite facebook sdk error
  implementation 'com.android.support.constraint:constraint-layout:1.0.2'
  implementation 'org.apache.commons:commons-lang3:3.6'
  implementation 'com.google.guava:guava:23.0-android'

  implementation 'com.nulab-inc:zxcvbn:1.2.5'

  // FIREBASE
  //  implementation "com.google.firebase:firebase-core:$firebaseVersion"
  implementation 'com.google.firebase:firebase-core:16.0.4'
  implementation 'com.google.firebase:firebase-messaging:17.3.3'
  implementation('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
    transitive = true
  }

  // GOOGLE ANALYTICS
  implementation 'com.google.android.gms:play-services-analytics:16.0.4'

  //  implementation 'com.facebook.android:facebook-android-sdk:[4,5)'
  implementation 'com.facebook.android:facebook-android-sdk:4.39.0'

  // AUTO VALUE
  compileOnly "com.google.auto.value:auto-value:$autoValueVersion"

  // Make AutoValue annotation visible to the compiler.
  annotationProcessor "com.google.auto.value:auto-value:$autoValueVersion"

  // Do not compile AutoValue dependencies to the app.
  annotationProcessor 'com.ryanharter.auto.value:auto-value-parcel:0.2.5'

  // LOCATION
  implementation 'com.google.android.gms:play-services-location:16.0.0'

  // RX
  implementation 'io.reactivex.rxjava2:rxjava:2.1.1'
  implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

  // EVENT BUS
  implementation 'org.greenrobot:eventbus:3.0.0'

  // DEPENDENCY INJECTION
  implementation "com.google.dagger:dagger:$daggerVersion"
  annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
  compileOnly 'org.glassfish:javax.annotation:10.0-b28'

  // VIEW INJECTION
  implementation "com.jakewharton:butterknife:$butterKnifeVersion"
  annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnifeVersion"

  // IMAGE LOADING
  implementation "com.github.bumptech.glide:glide:$glideVersion"
  annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"

  // REALM ADAPTERS
  implementation 'io.realm:android-adapters:2.1.0'

  // PHONE NUMBER FORMATTER
  implementation 'com.googlecode.libphonenumber:libphonenumber:8.5.2'

  // RUNTIME PERMISSIONS
  implementation "com.github.hotchemi:permissionsdispatcher:$permissionsdispatcherVersion"
  annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:$permissionsdispatcherVersion"

  // CUSTOM VIEWS
  implementation 'de.hdodenhof:circleimageview:2.1.0'
  implementation 'com.romandanylyk:pageindicatorview:0.2.0'
  implementation 'me.saket:better-link-movement-method:1.2'
  implementation 'com.bignerdranch.android:expandablerecyclerview:3.0.0-RC1'
  implementation 'uk.co.chrisjenx:calligraphy:2.3.0'
  implementation 'com.afollestad.material-dialogs:core:0.9.4.5'
  implementation 'me.grantland:autofittextview:0.2.1'
  implementation 'com.google.android:flexbox:0.3.1'
  implementation 'com.robertlevonyan.view:MaterialChipView:1.1.3'

  // SOCKET.IO
  implementation('io.socket:socket.io-client:0.8.3') {
    exclude group: 'org.json', module: 'json'
  }

  // LOGGING
  implementation 'com.jakewharton.timber:timber:4.6.0'

  // JAVA 8 STREAMS BACKPORT
  implementation 'com.annimon:stream:1.1.8'

  //for animation
  implementation 'com.sothree.slidinguppanel:library:3.4.0'

  // ViewPager Indicator
  implementation 'me.relex:circleindicator:1.2.2@aar'

  //material loader
  implementation 'me.zhanghai.android.materialprogressbar:library:1.4.2'

  //For REST
  implementation 'com.squareup.retrofit2:retrofit:2.3.0'
  implementation 'com.google.code.gson:gson:2.8.1'
  implementation 'com.squareup.retrofit2:converter-gson:2.4.0'

  // DEVELOPER TOOLS
  debugImplementation "hu.supercluster:paperwork:$paperworkVersion"
  //  debugImplementation "com.facebook.stetho:stetho:$stethoVersion"
  //  debugImplementation "com.facebook.stetho:stetho-okhttp3:$stethoVersion"
  debugImplementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'
  debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.1'
  debugImplementation 'com.github.brianPlummer:tinydancer:0.1.1'
  debugImplementation 'com.github.pedrovgs:lynx:1.6'
  debugImplementation 'com.jakewharton:process-phoenix:2.0.0'

  implementation 'android.arch.navigation:navigation-fragment:1.0.0-rc01'
}

def propsFile = file('custom.properties')

def signingAvailable = propsFile.exists()

if (signingAvailable) {
  def props = new Properties()
  props.load(new FileInputStream(propsFile))
  android.signingConfigs['release'].storeFile = file(props['storeFile'])
  android.signingConfigs['release'].storePassword = props['storePassword']
  android.signingConfigs['release'].keyAlias = props['keyAlias']
  android.signingConfigs['release'].keyPassword = props['keyPassword']
}

// Check if the build requires dex count
def withDexcount = project.hasProperty('withDexcount')
if (withDexcount) {
  apply plugin: 'com.getkeepsafe.dexcount'

  dexcount {
    format = 'list'
    includeFieldCount = true
    includeTotalMethodCount = true
    verbose = false
    maxTreeDepth = Integer.MAX_VALUE
  }
}
